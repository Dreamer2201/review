import React from 'react'
import '../styles/styles.scss'

export default function HomePage() {
    
  return (
    <div className='home'>
      <div>
        <ol>
            <li>
                <h2>Методи HTTP запитів:</h2>
                <ul>
                    <li>GET – запитує дані з бази даних;</li>
                    <li>POST – додає вміст, повідомлення або дані в базу даних;</li>
                    <li>PUT – замінює запис, що існує, на новий;</li>
                    <li>PATCH - часткова зміна даних;</li>
                    <li>DELETE – видалення певні даних;</li>
                    <li>HEAD – запитує певний ресурс без змісту тіла;</li>
                </ul>
            </li>

            <li>
                <h2>Версії HTTP протоколів</h2>
                <ul>
                    <li>
                    <h3>HTTP Hypertext Transfer Protocol.</h3>
                <p>Протокол HTTP відправляє дані в браузер з сервера, де зберігаються всі файли, що належать даному веб-сайту. Фактично, саме завдяки йому можна користуватися Інтернетом. Роботу протоколу HTTP можна визначити наступним чином: - використовуючи Інтернет, клієнт відправляє запит на сервер. Відбувається це, наприклад, при переході за цікавим посиланням; - сервер відправляє клієнту дані, що цікавлять його . Це весь контент, графіка, фотографії, а також банери.</p>
                    </li>
                    <li>
                    <h3>HTTPS</h3>
                <p>(HTTP Secure; протокол захищеного передавання гіпертексту.  Розширення протоколу НТТР. HTTPS - це набагато більш поширений протокол, який використовується на веб-сайтах, де потрібен захист конфіденційних даних. HTTP "стає" HTTPS за наявності SSL-сертифікату. Він відображається у полі URL-адреси у вигляді зеленого замку. Це знак того, що користувач сміливо може проводити оплату на даному сайті.)</p>
                    </li>
                </ul>
            </li>

            <li>
                <h2>Коди відповіді (стану) HTTP.</h2>
                <ul>
                    <li>200 - успішно оброблено</li>
                    <li>201 - успішно створеной (на POST запит)</li>
                    <li>204 - No Content (успішно видалений на DELETE запит)</li>
                    <li>301 - адреса змінена на постійній основі</li>
                    <li>302 - адреса змінена тимчасово</li>
                    <li>400 - Bad Request невірний запит</li>
                    <li>401 - не аутентифікований</li>
                    <li>403 - не вистачає прав</li>
                    <li>404 - такого не існує (наприклад id)</li>
                    <li>500 - помилка сервера</li>
                </ul>
            </li>

            <li>
                <h2>Різниця між responsive та adaptive disign</h2>
                <p>responsive - вигляд сайту не змінюється від розміру екрану</p>
                <p>adaptive - вигляд сайту змінюється від розміру екрану</p>
                <p>Розмір в'юпорту, за якого вся верстка або її окремі частини змінюють свої стилі, тобто змінюється дизайн, називається точкою перелому (breakpoint).</p>
            </li>
            <li>
                <p>flexbox - працює через обгортку-контейнер</p>
            </li>

            <li>
                <h2>Event loop</h2>
                <p>Це механізм, який дозволяє нам реалізувати неблокуючу модель вводу / виводу даних, працювати з асинхронним кодом. Call stack (предоставляет движок V8) - стек викликів функцій, він не нескінченнийб при роботі з великими числами - може крашитися. Web api (предоставляет браузер) - реєструє події. Callback (task) queue (предоставляет event loop) - черга задач, ділиться на макро (setTimeout) та мікро tasks (promise завжди попадає в мікро-tasks), пріоритет у мікро-tasks</p>
            </li>

            <li>
                <h2>Render</h2>
                <p>DOM - CSSOM - Render tree - Style calculation - Layout (браузер розуміє макет проекту: позиціонування, стилі) - Paint (браузер малює пікселі макета сторінки) - Composition (браузер працює з шарами (z-index))</p>
            </li>

        </ol>
    </div>
    </div>
  )
}
